package com.cyberslex.API_REST_COMPLETO.controller;

import java.util.*;

import javax.annotation.PostConstruct;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cyberslex.API_REST_COMPLETO.entity.Empleado;

@RestController
@RequestMapping("/api")
public class EmpleadoRestController {
	
	private List<Empleado> losEmpleados;
	
	
	
	@PostConstruct  //Esta anotación sirve para que siempre que se cargue la aplicación, se ejecute este método aunque no sea visible (segundo plano). Una vez que se ejecute getEmpleados solo obtendrá la información que ya se obtuvo, patra hacerla visible. Sirve para ahorrar recursos.
	public void cargaDatos() {  //En realidad todo podría estar junto en un sólo método.
		
		losEmpleados=new ArrayList<>();   //Hay que recordar que las lista, antes de manipularlas, se deben inicializar.
		losEmpleados.add(new Empleado("Juan", "Diaz"));
		losEmpleados.add(new Empleado("Martha", "Gonzalez"));
		losEmpleados.add(new Empleado("Carlos", "Mendez"));
		losEmpleados.add(new Empleado("Fede", "Mendiola"));
		
	}
	
	
	@GetMapping("/empleados")   //En este caso estamos utilizando la anotación @RestController y no @Controller, lo que implica que el método respectivo, en este caso, getEmpleado ya no busca una vista (jsp), sino que devuelve estrictamente lo que tú devuelvas en el método. Si el método devuelve un string, mostrará la leyenda en el navegador. 
	public List<Empleado> getEmpleado(){  //En nuestro caso estamos devolviendo una lista. Esta lista es visible, con ayuda de jackson-databind, en formata json en el navegador.
		

		return losEmpleados;
		
	}
	
	@GetMapping("/empleado/{empleadoId}") 
	public Empleado getUnEmpleado(@PathVariable int empleadoId) { //Con la anotación @PathVariable estamos creando una variable que pueda pasar como argumento en la URL (la debemos poner de forma manual). Como segundo paso esta variable la debemos pasar a la URL que nostros creemos.
		
		if((empleadoId>=losEmpleados.size()) || empleadoId <0) {
			
			throw new EmpleadoException("El id " + empleadoId + " no existe.")
			
		}
		
		return losEmpleados.get(empleadoId);  //Como tercer paso debemos pasar como argumento que haya ingresado por la URL, al tradicional método get que se aplica a una lista. Hay que recordar que sirve para obtner la información de un elemento de una lista por su posición. 
		
	}

}
