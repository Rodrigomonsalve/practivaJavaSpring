#ESTE AMBIENTE SIRVE PARA CONECTARNOS A UNA BD EN MYSQL(EN NUESTRO CASO ESTAMOS USANDO UN CONTENEDOR DE DOCKER)

#AHORA APUNTA AL PUERTO DEL CONTENEDOR, NO DEL HOST, Y APUNTA AL CONTENEDOR DE MYSQL(my-mysql).
# EN SU MOMENTO CREAMOS UN CONTENEDOR:  docker run --name my-mysql -p 3308:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=course -d mysql
# USAMOS "my-mysql" PORQUE YA ESTAMOS USANDO UNA RED (DE DOCKER) PARA CONECTAR UN CONTENEDOR DE DOCKER DE BD CON UN CONTENEDOR QUE DE LA APLICACI흁. ENTONCES "my-mysql" ES EL NOMBRE DEL DNS QUE OBTIENE SU NOMBRE DEL DEL CONTENEDOR.
# db YA SER페 EL NOMBRE DEL service CUANDO USAMOS DOCKER COMPOSE.
# spring.datasource.url=jdbc:mysql://my-mysql:3306/course
spring.datasource.url=jdbc:mysql://db:3306/course
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver.class-name=com.mysql.cj.jdbc.Driver

#spring.sql.init.platform SIRVE PARA ESCOGER LA CREACION E INSERCION A BASE DE DATOS. EN NUESTRO CASO, PARA ESTE AMBIENTE, ESTAMOS SELECCIONANDO data-mysql.sql.
spring.sql.init.platform=mysql

#REDES
#Las redes sirven para conectar 2 contenedores. Ejemplo: si hay un contenedor con base de datos, y un contenedor con una aplicacion que requiere conectarse a esa bd. La creaci칩n de una red se necesita, debido a que, hay que recordar, los contenedores estan completamente aislados. Entonces hay que colocar ambos contenedores dentro de una misma red:
#(docker network create mi-red) --> Se crea la red.
#(docker network connect mi-red my-app-container-docker) --> Se agrega el contenedor de la aplicaci칩n a la red.
#(spring.datasource.url=jdbc:mysql://my-mysql:3306/course) --->  En el application.properties debe agreagrarse como conexion a la bd un dns que lleve por nombre el contenedor de la bd.
#(docker network connect mi-red my-mysql) --> Se agrega el contenedor de la bd a la red.
#Luego, primero debe levatarse el contenedor de la bd y luego el contenedor de la aplicaci칩n.
#(docker network ls) ---> Para ver las redes existentes.


