package com.cyberslex.api.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.cyberslex.api.entity.Persona;

// ES IMPORTANTE MENCIONAR QUE LOS 3 MÉTODOS DECLARADOS EN ESTA CLASE, SON MÉTODOS ALTERNOS A LOS ESTABLECIDOS EN LA CLASE JpaRepository. NO SON INDISPENSABLES, PORQUE YA HAY MÉTODOS EN JpaRepository CON LOS QUE PUEDES BUSCAR PERSONAS.
// ESTOS 3 MÉTODOS SIRVEN POR SI QUIERES USAR QUERIES DIRECTAMENTE.
// LOS 3 MÉTODOS HACEN EXACTAMENTE LO MISMO.

@Repository
//public interface PersonaRepository extends JpaRepository<Persona, Long> {  //Long es el tipo de variable "id" creada en la clase entidad "Persona"
public interface PersonaRepository extends BaseRepository<Persona, Long>{
	
	
	// ESTE ES UN MÉTODO DERIVADO. NOS LO PROVEÉ JPAREPOSITORY
	// JPA NOS DA KEYWORDS PARA SER USADOS EN EL NOMBRE DEL MÉTODO. NO PUEDES NOMBRARLO COMO TÚ QUIERAS.
	// DIGAMOS QUE LA QUERY SE ENCUENTRA EN EL NOMBRE DEL MÉTODO.
	// LAS KEYWORDS SON MUCHAS, POR LO QUE HAY QUE INVESTIGARLOS.
	List<Persona> findByNombreContainingOrApellidoContaining(String nombre, String apellido);
	
	//boolean existsByDni(int dni);
	
	
	// SE USA JPQL
	@Query(value = "SELECT p FROM Persona p WHERE p.nombre LIKE %:filtro% OR p.apellido LIKE %:filtro%")
	List<Persona> search(@Param("filtro") String filtro);
	
	
	
	// NO FUNCIONA
	// SE USA SQL.
	@Query(value = "SELECT * FROM persona WHERE persona.nombre LIKE '%:filtro%' OR persona.apellido LIKE '%:filtro%'", nativeQuery= true)
	List<Persona> searchNativo(@Param("filtro") String filtro);

}
