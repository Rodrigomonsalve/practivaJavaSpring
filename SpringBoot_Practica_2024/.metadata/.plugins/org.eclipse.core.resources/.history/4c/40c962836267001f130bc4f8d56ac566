package com.cyberslex.api.controllers;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cyberslex.api.entity.Persona;
import com.cyberslex.api.service.PersonaService;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/api/v1/persona")
public class PersonaController {
	
	private PersonaService personaService;
	
	public PersonaController(PersonaService personaService){
		this.personaService = personaService;
		
	
	}
	
	@GetMapping("") //También se puede hacer esto. Significa que con tan solo acceder a /api/v1/persona ya estarás accediendo al método getAll().
	public ResponseEntity<?> getAll(){     // Hay que recordar que la clase ResponseEntity sirve para poder personalizar una respuesta http. La puedes utilizar en cualquier mètodo que se encuentre dentro de un controlador. No fue indispensable usarla en este método. El primer argumento es el mensaje que verás en panatalla, y el segundo, la respuesta http que tú desees como respuesta.
		
		try {
			
			return ResponseEntity.status(HttpStatus.OK).body(personaService.findAll()); // Hay que recordar que en el código de api-rest de Pildoras Informàticas, retornamos "new ResponseEntity<> (error,HttpStatus.BAD_REQUEST);".  En el caso de este método, el método body retorna exactamente lo mismo, por lo que resulta 
			
		}catch (Exception e){
			
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("{\"error\":\"Error. Por favor intente mas tarde.\"}");
		
		}
	}
	
	
	@GetMapping("/{id}")
	public ResponseEntity<?> getOne(@PathVariable Long id){
	
		try {
			
			return ResponseEntity.status(HttpStatus.OK).body(personaService.findById(id));
			
		}catch (Exception e){
			
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("{\"error\":\"Error. Por favor intente mas tarde.\"}");
		
		}
	}
	
	
	@PostMapping("/")
	public ResponseEntity<?> save(@RequestBody Persona entity){
		
		try {
			
			return ResponseEntity.status(HttpStatus.OK).body(personaService.save(entity));
			
		}catch (Exception e){
			
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error. Por favor intente mas tarde.\"}");
		
		}
		
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<?> update(@PathVariable Long id, @RequestBody Persona entity){
		
		try {
			
			return ResponseEntity.status(HttpStatus.OK).body(personaService.update(id, entity));
			
		}catch (Exception e){
			
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error. Por favor intente mas tarde.\"}");
		
		}
		
	}
	
	
	@DeleteMapping("/{id}")
	public ResponseEntity<?> delete(@PathVariable Long id){
		
		try {
			
			return ResponseEntity.status(HttpStatus.NO_CONTENT).body(personaService.delete(id));
			
		}catch (Exception e){
			
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("{\"error\":\"Error. Por favor intente mas tarde.\"}");
		
		}
		
		
	}

}
