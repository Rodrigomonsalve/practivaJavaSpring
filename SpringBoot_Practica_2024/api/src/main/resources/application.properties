# Unable to determine Dialect without JDBC metadata (please set 'jakarta.persistence.jdbc.url' for common cases or 'hibernate.dialect' when a custom Dialect implementation must be provided)
# El error anterior aparace si no especificamos un dialecto(no todos funcionan) o el dialecto por default tampoco se reconoce.

#Si no tenemos application.properties que haga conexion a base de datos, no permitira iniciar el servidor, en caso de que tengamos la libreria spring-boot-starter-data-jpa.
#Hay que tener cuidado con poner caracteres extranos en este archivo. No se mostrara ningun error aqui, pero se vera reflejado de forma indirecta en el pom.xml. Mostrara posiblemente un error en mojo y el server no se podrá iniciar.
# Este archivo, al igual que cualquier otro (xml, json, jsp) deben estar codificados en UTF-8. De lo contario el server no se podrá iniciar.
#Hay que recordar que la conexión a base de datos en SpringFramwork se realiza dentro del xml contenedor de beans (spring-crud-servlet.xml), que se encuentra dentro de la carpeta WEB-INF, si es un proyecto web. De lo contrario, hay que recordar que todo contenedeor de beans se encuentra en la carpeta src (applicationContext.xml)
spring.application.name=BD

spring.datasource.url=jdbc:mysql://localhost:3306/usuarios
                     	
spring.datasource.username=root

spring.datasource.password=

spring.jpa.show-sql=true

#Esta propiedad es importante: si lleva el valor "update" todo lo que hagas en el código pasará automáticamente a la base de datos de ser necesario, al reiniciar el servidor. Esto es trascendental para CREAR TABLAS DE FORMA AUTOMÁTICA SIN SCRIPTS EN LA BASE DE DATOS. 
#También se puede utilizar "drop", que significa que borrará todas las tablas en cuanto se reinicie el servidor. Si lleva "validate", significa que sólo arrojará un error en caso de que haya diferencias entre el código y la base de datos.
# En ambientes productivos NO SE DEBE USAR ESTA PROPIEDAD, pues no es la forma adecuada para gestionar y crear bases de datos y tablas.
spring.jpa.hibernate.ddl-auto=update

#Esta es la forma de modificar el puerto en el cual se lanza el servidor Tomcat. Si no pones nada, por defecto es el 8080. En Spring Framework hay que recordar que el puerto se modifica en la pestaña "Servers" y dando doble click sobre el servidor configurado.
# Es como el "listen" del documento httpd.conf(Citi).
server.port = 8082

#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect      Un dialecto se usa para traducir sentencias HDL(Hibernate) en el SQL correspodiente al SGBD que estés usando. Si no se usa un dialecto espec�fico, Hibernate utilizar� uno por defecto, pero puede no ser eficaz.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


